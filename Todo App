<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TODO APP</title>
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <style>
      :root {
        --white: #fff;
        --light-grey: #f5f6f7;
        --dark-gray: #0a0a23;
        --yellow: #f1be32;
        --golden-yellow: #feac32;
      }

      *,
      *::after,
      *::before {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        background-color: var(--dark-gray);
      }

      main {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }

      h1 {
        color: var(--light-grey);
        margin: 20px 0px 40px 0px;
      }

      .todo-app {
        background-color: var(--white);
        width: 80%;
        height: 350px;
        border: 5px solid var(--yellow);
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        position: relative;
        gap: 10px;
      }

      .btn {
        cursor: pointer;
        width: 100px;
        margin: 10px;
        color: var(--dark-gray);
        background-color: var(--golden-yellow);
        background-image: linear-gradient(#fecc4c, #ffac33);
        border-color: var(--golden-yellow);
        border-width: 3px;
      }
      .btn:hover {
        background-image: linear-gradient(#ffcc4c, #f89808);
      }

      .large-btn {
        width: 80%;
        font-size: 1.2rem;
        align-self: center;
        margin-top: 7%;
        justify-self: center;
      }

      .close-task-form-btn {
        background: none;
        background-color: var(--yellow);
        border: none;
        cursor: pointer;
        width: 20px;
        height: 20px;
      }

      .task-form {
        display: flex;
        position: absolute;
        align-self: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        background-color: var(--white);
        border-radius: 5px;
        padding: 15px;
        flex-direction: column;
        justify-content: space-between;
        overflow: auto;
      }
      .task-form-header {
        display: flex;
        justify-content: end;
      }
      .task-form-body {
        display: flex;
        flex-direction: column;
        justify-content: space-around;
      }
      .task-form-footer {
        display: flex;
        justify-content: center;
      }

      .task-form-label,
      #title-input,
      #date-input,
      #description-input {
        display: block;
      }

      .task-form-label {
        margin-bottom: 5px;
        font-size: 1.2rem;
        font-weight: bold;
      }

      #title-input,
      #date-input,
      #description-input {
        width: 100%;
        margin-bottom: 5%;
        padding: 3px;
      }

      #confirm-close-dialog {
        padding: 10px;
        margin: auto;
        border-radius: 15px;
      }

      .confirm-close-dialog-btn-container {
        display: flex;
        justify-content: center;
        margin-top: 10px;
      }

      .discard-message-text {
        font-weight: bold;
        font-size: 1.3rem;
      }

      #tasks-container {
        height: 100%;
        overflow-y: auto;
      }

      .task {
        margin: 5px 10px;
      }

      .hidden {
        display: none;
      }

      @media (min-width: 576px) {
        .todo-app {
          width: 400px;
          height: 450px;
        }
        .task-form-label {
          font-size: 1.5rem;
        }
        #title-input,
        #date-input {
          height: 2rem;
        }
        #title-input, #date-input, #description-input {
          padding: 5px;
          margin-bottom: 7%;
        }
      }
    </style>
  </head>
  <body>
    <main>
      <h1>Todo App</h1>
      <div class="todo-app">
        <button id="open-task-form-btn" class="btn large-btn">
          Add New Task
        </button>
        <form class="task-form hidden" id="task-form">
          <div class="task-form-header">
            <button
              class="close-task-form-btn"
              id="close-task-form-btn"
              type="button"
              aria-label="close"
            >
              <i class="ri-close-large-line"></i>
            </button>
          </div>
          <div class="task-form-body">
            <label for="title-input" class="task-form-label">Title</label>
            <input
              type="text"
              class="form-control"
              id="title-input"
              required="required"
              value=""
            />
            <label for="date-input" class="task-form-label">Date</label>
            <input type="date" class="form-control" id="date-input" value="" />
            <label for="description-input" class="task-form-label"
              >Description</label
            >
            <textarea
              class="form-control"
              id="description-input"
              cols="30"
              rows="5"
            ></textarea>
          </div>
          <div class="task-form-footer">
            <button
              id="add-or-update-task-btn"
              class="btn large-btn"
              type="submit"
            >
              Add Task
            </button>
          </div>
        </form>

        <dialog class="confirm-close-dialog" id="confirm-close-dialog">
          <form method="dialog">
            <p class="discard-message-text">Discard Unsaved Changed?</p>
            <div class="confirm-close-dialog-btn-container">
              <button id="cancel-btn" class="btn">Cencel</button>
              <button id="discard-btn" class="btn">Discard</button>
            </div>
          </form>
        </dialog>

        <div id="tasks-container"></div>
      </div>
    </main>

    <script>
      const taskForm = document.getElementById("task-form");
      const confirmCloseDialog = document.getElementById(
        "confirm-close-dialog"
      );
      const openTaskFormBtn = document.getElementById("open-task-form-btn");
      const closeTaskFormBtn = document.getElementById("close-task-form-btn");
      const addOrUpdateTaskBtn = document.getElementById(
        "add-or-update-task-btn"
      );
      const cancelBtn = document.getElementById("cancel-btn");
      const discardBtn = document.getElementById("discard-btn");
      const tasksContainer = document.getElementById("tasks-container");
      const titleInput = document.getElementById("title-input");
      const dateInput = document.getElementById("date-input");
      const descriptionInput = document.getElementById("description-input");

      const taskData = JSON.parse(localStorage.getItem("data")) || [];
      let currentTask = {};

      const addOrUpdateTask = () => {
        const dataArrIndex = taskData.findIndex(
          (item) => item.id === currentTask.id
        );
        const taskObj = {
          id: `${titleInput.value
            .toLowerCase()
            .split(" ")
            .join("-")}-${Date.now()}`,
          title: titleInput.value,
          date: dateInput.value,
          description: descriptionInput.value,
        };

        if (dataArrIndex === -1) {
          taskData.unshift(taskObj);
        } else {
          taskData[dataArrIndex] = taskObj;
        }

        localStorage.setItem("data", JSON.stringify(taskData));
        updateTaskContainer();
        reset();
      };

      const updateTaskContainer = () => {
        tasksContainer.innerHTML = "";

        taskData.forEach(({ id, title, date, description }) => {
          tasksContainer.innerHTML += `
        <div class="task" id="${id}">
          <p><strong>Title:</strong> ${title}</p>
          <p><strong>Date:</strong> ${date}</p>
          <p><strong>Description:</strong> ${description}</p>
          <button onclick="editTask(this)" type="button" class="btn">Edit</button>
          <button onclick="deleteTask(this)" type="button" class="btn">Delete</button> 
        </div>
      `;
        });
      };

      const deleteTask = (buttonEl) => {
        const dataArrIndex = taskData.findIndex(
          (item) => item.id === buttonEl.parentElement.id
        );

        buttonEl.parentElement.remove();
        taskData.splice(dataArrIndex, 1);
        localStorage.setItem("data", JSON.stringify(taskData));
      };

      const editTask = (buttonEl) => {
        const dataArrIndex = taskData.findIndex(
          (item) => item.id === buttonEl.parentElement.id
        );

        currentTask = taskData[dataArrIndex];

        titleInput.value = currentTask.title;
        dateInput.value = currentTask.date;
        descriptionInput.value = currentTask.description;

        addOrUpdateTaskBtn.innerText = "Update Task";

        taskForm.classList.toggle("hidden");
      };

      const reset = () => {
        titleInput.value = "";
        dateInput.value = "";
        descriptionInput.value = "";
        taskForm.classList.toggle("hidden");
        currentTask = {};
      };

      if (taskData.length) {
        updateTaskContainer();
      }

      openTaskFormBtn.addEventListener("click", () =>
        taskForm.classList.toggle("hidden")
      );

      closeTaskFormBtn.addEventListener("click", () => {
        const formInputsContainValues =
          titleInput.value || dateInput.value || descriptionInput.value;
        const formInputValuesUpdated =
          titleInput.value !== currentTask.title ||
          dateInput.value !== currentTask.date ||
          descriptionInput.value !== currentTask.description;

        if (formInputsContainValues && formInputValuesUpdated) {
          confirmCloseDialog.showModal();
        } else {
          reset();
        }
      });

      cancelBtn.addEventListener("click", () => confirmCloseDialog.close());

      discardBtn.addEventListener("click", () => {
        confirmCloseDialog.close();
        reset();
      });

      taskForm.addEventListener("submit", (e) => {
        e.preventDefault();

        addOrUpdateTask();
      });
    </script>
  </body>
</html>
