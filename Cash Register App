<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <style>
    * {
      padding: 0;
      margin: 0;
      box-sizing: border-box;
    }

    :root {
      --background: #0A0A23;
      --purchase-btn: #FEC546;
      --heading: #DFDFE2;
      --black: #000000;
      --blue: #99C9FF;
    }

    body {
      background-color: var(--background);
    }

    .landingScreen {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    h1 {
      margin-top: 7vh;
      margin-bottom: 30px;
      color: var(--heading);
      font-size: 7vh;
    }

    .change-due {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .input-div {
      display: flex;
      flex-direction: column;
      gap: 3vh;
      margin-bottom: 30px;
    }

    label {
      color: var(--heading);
      font-size: 4vh;
    }

    input {
      border: none;
      height: 4vh;
      width: 70%;
      margin: auto;
      padding: 10px;
      font-size: larger;
    }

    #purchase-btn {
      color: black;
      background-color: var(--purchase-btn);
      width: 100px;
      margin: auto;
      height: 5vh;
      font-size: large;
      border: 4px solid #b87e0a;
    }

    #purchase-btn:hover {
      background-color: #e9ae30;
    }

    .price {
      background-color: black;
      color: white;
      text-align: center;
      padding: 5px;
      border: 10px solid #99C9FF;
      margin: auto;
      width: 40%;
    }

    .btn {
      height: 25px;
      width: 25px;
      background-color: var(--black);
    }

    .side-by-side {
      display: flex;
      flex-direction: row;
      margin-top: 20px;
      background-color: var(--blue);
      padding: 20px;
      border-radius: 5%;
      width: 320px;
      height: 250px;
    }

    .buttons {
      width: 30%;
    }

    .drawer {
      background-color: white;
      width: 50%;
      margin-left: auto;
      padding: 5px;
    }

    .change-due {
      margin: 10px auto;
    }

    .change-due p {
      color: white;
      font-size: larger;
      margin-bottom: 5px;
    }
  </style>
</head>

<body>
  <div class="landingScreen">
    <h1>Cash Register App</h1>
    <div class="change-due" id="change-due"></div>
    <div class="input-div">
      <label for="cash">Enter Cash from Customer</label>
      <input type="number" id="cash" />
      <button type="button" id="purchase-btn">Purchase</button>
    </div>
    <div class="container">
      <div class="price">Total: $1.87</div>
      <div class="side-by-side">
        <div class="buttons">
          <button class="btn"></button>
          <button class="btn"></button>
          <button class="btn"></button>
          <button class="btn"></button>
          <button class="btn"></button>
          <button class="btn"></button>
          <button class="btn"></button>
          <button class="btn"></button>
          <button class="btn"></button>
        </div>
        <div class="drawer" id="drawer">
          <p><strong>Change in Drawer</strong></p>
          <p>Pennies: $1.01</p>
          <p>Nickles: $2.05</p>
          <p>Dimes: $3.1</p>
          <p>Quarters: $4.25</p>
          <p>Ones: $90</p>
          <p>Fives: $55</p>
          <p>Tens: $20</p>
          <p>Twenties: $60</p>
          <p>Hundreds: $100</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    let price = 19.5;
    let cid = [
      ["PENNY", 1.01],
      ["NICKEL", 2.05],
      ["DIME", 3.1],
      ["QUARTER", 4.25],
      ["ONE", 90],
      ["FIVE", 55],
      ["TEN", 20],
      ["TWENTY", 60],
      ["ONE HUNDRED", 100]
    ];

    const denominations = [
      { name: 'ONE HUNDRED', value: 100 },
      { name: 'TWENTY', value: 20 },
      { name: 'TEN', value: 10 },
      { name: 'FIVE', value: 5 },
      { name: 'ONE', value: 1 },
      { name: 'QUARTER', value: 0.25 },
      { name: 'DIME', value: 0.1 },
      { name: 'NICKEL', value: 0.05 },
      { name: 'PENNY', value: 0.01 }
    ];

    const getCidOrdered = () => {
      return denominations.map(denom => {
        const cidItem = cid.find(item => item[0] === denom.name);
        return {
          currency: denom.name,
          amount: cidItem ? cidItem[1] : 0,
          value: denom.value
        };
      });
    };

    const cashInput = document.getElementById("cash");
    const button = document.getElementById("purchase-btn");
    const changeDueDiv = document.getElementById("change-due");

    const updateDrawerDisplay = () => {
        const drawer = document.getElementById("drawer");
        drawer.innerHTML = `<p><strong>Change in Drawer</strong></p>`;

        cid.forEach(([currency, amount]) => {
          drawer.innerHTML += `<p>${currency}: $${amount.toFixed(2)}</p>`;
        });
      };

      const displayChange = (changeDue) => {
        let changeArray = [];
        let totalChangeGiven = 0;
        let status = "OPEN";

        const cidOrdered = getCidOrdered();
        const totalInDrawer = cidOrdered.reduce((sum, { amount }) => sum + amount, 0);

        if (totalInDrawer < changeDue) {
          changeDueDiv.innerHTML = `<p>Status: INSUFFICIENT_FUNDS</p>`;
          return;
        }

        if (totalInDrawer === changeDue) {
          status = "CLOSED";
          changeArray = cidOrdered.filter(item => item.amount > 0).map(item => [item.currency, item.amount]);
        } else {
          for (let { currency, amount, value } of cidOrdered) {
            let currencyChange = 0;

            while (changeDue >= value && amount > 0) {
              changeDue = parseFloat((changeDue - value).toFixed(2));
              amount = parseFloat((amount - value).toFixed(2));
              currencyChange += value;
              totalChangeGiven = parseFloat((totalChangeGiven + value).toFixed(2));
            }

            if (currencyChange > 0) {
              changeArray.push([currency, currencyChange]);

              // Update the original `cid` to reflect the change given
              const cidItem = cid.find(item => item[0] === currency);
              if (cidItem) cidItem[1] = parseFloat(amount.toFixed(2));
            }
          }

          if (changeDue > 0) {
            changeDueDiv.innerHTML = `<p>Status: INSUFFICIENT_FUNDS</p>`;
            return;
          }
        }

        let changeHtml = `<p>Status: ${status}</p>`;
        for (let [currency, amount] of changeArray) {
          changeHtml += `<p>${currency}: $${amount.toFixed(2)}</p>`;
        }

        changeDueDiv.innerHTML = changeHtml;

        // Update the drawer display with the new amounts
        updateDrawerDisplay();
      };

      const checkResults = () => {
        const cash = parseFloat(cashInput.value);
        if (cash < price) {
          alert("Customer does not have enough money to purchase the item");
          return;
        } else if (cash === price) {
          changeDueDiv.innerHTML = `<p>No change due - customer paid with exact cash</p>`;
        } else {
          const changeDue = parseFloat((cash - price).toFixed(2));
          displayChange(changeDue);
        }
        cashInput.value = "";
      };

      // Initial display of the cash in drawer
      updateDrawerDisplay();


    button.addEventListener("click", checkResults);

    cashInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        checkResults();
      }
    });

  </script>
</body>

</html>
